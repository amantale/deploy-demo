name: Build
run-name: Build ${{ github.ref_name }}
on:
  workflow_dispatch:
  workflow_call:
    outputs:
      artifactory-version-tag:
        description: "Artifactory version Tag"
        value: ${{ jobs.package_artifactory.outputs.artifactory-version-tag }}


jobs:
  package_artifactory:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Set up TemurinJDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

#      - name: Set up TemurinJDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          server-id: artifactory
#          server-username: ARTIFACTORY_ACCESS_READ_TOKEN_USERNAME
#          server-password: ARTIFACTORY_ACCESS_READ_TOKEN
#          cache: 'maven'

#      - name: Get Artifactory Read Access Token
#        uses: Bandwidth/vault-provider-action@v1
#        with:
#          artifactory-access-token-type: readers
#
#      - name: Outputs reader token
#        shell: bash
#        run: |
#          echo "ARTIFACTORY_ACCESS_READ_TOKEN_USERNAME=${{ env.ARTIFACTORY_ACCESS_TOKEN_USERNAME }}" >> $GITHUB_ENV
#          echo "ARTIFACTORY_ACCESS_READ_TOKEN=${{ env.ARTIFACTORY_ACCESS_TOKEN }}" >> $GITHUB_ENV
#
#      - name: Get Artifactory Write Access Token
#        uses: Bandwidth/vault-provider-action@v1
#        with:
#          artifactory-access-token-type: "dev-writers"
#
#      - name: Login to Docker registry
#        uses: docker/login-action@v2
#        with:
#          registry: bandwidth-docker.jfrog.io
#          username: ${{ env.ARTIFACTORY_ACCESS_TOKEN_USERNAME }}
#          password: ${{ env.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: deploydemo.jfrog.io/docker/jfrog-docker-example-image:${{ github.run_number }}
        run: |
          jf docker build -t $IMAGE_NAME .
          jf docker push $IMAGE_NAME

      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
